language: cpp

cache:
 - apt

before_install:
  # we need a recent version of CMake
  # - sudo add-apt-repository -y ppa:andykimpe/cmake3
  # linux prereqisite packages
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then wget --no-check-certificate https://www.cmake.org/files/v3.2/cmake-3.2.3-Linux-x86_64.tar.gz; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then tar -xzvf cmake-3.2.3-Linux-x86_64.tar.gz; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then export PATH=$PWD/cmake-3.2.3-Linux-x86_64/bin:$PATH; fi
  - sudo apt-get update -qq
  - sudo apt-get install -qq -y unixodbc-dev libmysqlclient-dev libsqlite3-dev 
  - sudo apt-get install -qq -y g++-arm-linux-gnueabi g++-arm-linux-gnueabihf clang-3.5 
  - sudo apt-get install -qq -y sloccount cppcheck 

services:
  - mongodb
  - redis-server

notifications:
  slack: 
    rooms:
      - pocoproject:ItIUZvs8aJGyPdaKxIKMnS1t
      - kampbell:v4ARuptk0ETzwUsKDdV6Gspb#travis

env:
  global: TEST_NAME=""

before_script:
 - echo ${TEST_NAME}
 - sqlite3 -version

matrix:
  include:
    - env:    TEST_NAME="gcc (make) bundled"
      compiler: gcc
      script:
        - ./configure --everything && make -s -j2
        - travis_wait 30 ./travis/runtests.sh
    
    - env:    TEST_NAME="gcc (make) unbundled"
      compiler: gcc
      script:
        - sudo apt-get install -qq -y libpcre3-dev libssl-dev libexpat1-dev
        - ./configure --everything --unbundled && make -s -j2
        - travis_wait 30 ./travis/runtests.sh
    
    - env:    TEST_NAME="clang (make)"
      compiler: clang
      script:
        - ./configure --everything --config=Linux-clang && make -s -j2
        - travis_wait 30 ./travis/runtests.sh

    #FIXME    the -m64 option bring by the Linux config is not supported by arm-linux-gnueabi-g++ which makes this test failing
    #FIXME    - env:    TEST_NAME="arm-linux-gnueabi- (make)"
    #FIXME      script:
    #FIXME        - ./configure --omit=Data/ODBC,Data/MySQL,Crypto,NetSSL,PageCompiler && make -s -j2 CROSS_COMPILE=arm-linux-gnueabi- POCO_TARGET_OSARCH=armv7l

    - env:    TEST_NAME="gcc (CMake)"
      compiler: gcc
      script:
        # disable tests, gcc-4.6 gets an internal compiler error
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_TESTS=OFF .. && make -j2 && cd ..

    - env:    TEST_NAME="gcc-4.8 (CMake)"
      compiler: gcc
      script:
        - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        - sudo apt-get update -qq
        - sudo apt-get install -qq -y g++-4.8
        - export CC="gcc-4.8"
        - export CXX="g++-4.8"
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_TESTS=ON .. && make -j2 && cd ..

    - env:    TEST_NAME="clang (CMake)"
      compiler: clang
      script:
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_TESTS=ON .. && make -j2 && cd ..

    - env:    TEST_NAME="arm-linux-gnueabi-g++ (CMake)"
      script:
        - export CC="arm-linux-gnueabi-gcc"
        - export CXX="arm-linux-gnueabi-g++"
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_NETSSL=OFF -DENABLE_CRYPTO=OFF -DENABLE_TESTS=ON .. && make -j2 && cd ..

    - env:    TEST_NAME="arm-linux-gnueabihf-g++ (CMake)"
      script:
        - export CC="arm-linux-gnueabihf-gcc"
        - export CXX="arm-linux-gnueabihf-g++"
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_NETSSL=OFF -DENABLE_CRYPTO=OFF -DENABLE_TESTS=ON .. && make -j2 && cd ..

    # TODO osx build
    # TODO run test suite
    #  script:
    #    - ./configure && make -s -j2
    #    - sudo ifconfig -a
    #    - sudo ifconfig venet0 multicast
    #    - sudo ifconfig -a
    #    - export POCO_BASE=`pwd`
    #    - sudo -E build/script/runtests.sh

    # QA jobs for code analytics and metrics
    # build documentation and release
    - env:    TEST_NAME="documentation & release"
      compiler: gcc
      script:
        - . env.sh && mkdoc all && mkrel all

    # static code analysis with cppcheck (we can add --enable=all later)
    - env:    TEST_NAME="cppcheck"
      script: cppcheck --force --quiet --inline-suppr -j2 -iData/SQLite/src/sqlite3.c .
    # search for TODO within source tree
    - env:    TEST_NAME="TODO"
      script: grep -r TODO *
    # search for FIXME within source tree
    - env:    TEST_NAME="FIXME"
      script: grep -r FIXME *
    # search for HACK within source tree
    - env:    TEST_NAME="HACK"
      script: grep -r HACK *
    # some statistics about the code base
    - env:    TEST_NAME="sloccount"
      script: sloccount .
