language: cpp

cache:
 - apt

before_install:
  # we need a recent version of CMake
  # linux prereqisite packages
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then wget --no-check-certificate https://www.cmake.org/files/v3.2/cmake-3.2.3-Linux-x86_64.tar.gz; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then tar -xzvf cmake-3.2.3-Linux-x86_64.tar.gz; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then export PATH=$PWD/cmake-3.2.3-Linux-x86_64/bin:$PATH; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update -qq; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq -y libssl-dev unixodbc-dev libmysqlclient-dev g++-arm-linux-gnueabi g++-arm-linux-gnueabihf clang-3.5 libc++-dev ninja-build sloccount cppcheck; fi
  - git submodule update --init --recursive --remote gradle

services:
  - mongodb
  - redis-server
  - postgresql
  - mysql

addons:
  postgresql: "9.4"

git:
  submodules: false

notifications:
  slack:
    secure: "EKysuMlTU3Uv5XFX+zuwHK/ej4wtD8+UjO5xvchCFMkRgM0V3rERVT1rV6NocNBH4hjTcvue9DEKdWAtqdDh06vTOHGKdnZ/e204jA38HfcIA0SPVbQXzjckQXALvKl51OPOmGuI7Feo4wyohzUyGoDLo1bom02xqDfC3caQB5Q="

env:
  global: TEST_NAME=""

before_script:
 - echo ${TEST_NAME}

matrix:
  include:
#    - env:    TEST_NAME="Gradle"
#      os: osx
#      compiler: clang
#      script:
#        - brew install mysql
#        - brew install unixodbc
#        - chmod 777 ./gradle/bin/gradle
#        - sudo ./gradle/bin/gradle --console=plain -g travis -c travis/settings.gradle build check -Ptest=-all

#    - env:    TEST_NAME="Gradle"
#      os: linux
#      compiler: gcc
#      script:
#        - chmod 777 ./gradle/bin/gradle
#        - sudo ./gradle/bin/gradle --console=plain -g travis -c travis/settings.gradle build check -Ptest=-all

    - env:    TEST_NAME="android API level 19"
      language: android
      jdk: openjdk8
      android:
        components:
          - tools
          - platform-tools
          - tools
          - build-tools-23.0.3
          - extra-android-support
          - extra-android-m2repository
          - android-19
          - android-24
          - sys-img-armeabi-v7a-android-24
          # Unfortunaly travis use the old android sdk tool instead of using the new sdkmanager.
          # In this deprecated android sdk tool there is no ndk-bundle or cmake package!
        licenses:
          - '.+'
      before_install:
        - export TERM=dumb
        - sudo apt-get update -qq
        # I don't understand why redis and mongodb are not installed although services added above !
        - sudo apt-get install -qq -y mongodb-server redis-server
        - /usr/bin/redis-server &
        - sudo /usr/bin/mongod --config /etc/mongodb.conf &
        - touch ~/.android/repositories.cfg
        - mkdir -p /usr/local/android-sdk/licenses
        - echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > /usr/local/android-sdk/licenses/android-sdk-license
        - echo -e "\nd56f5187479451eabf01fb78af6dfcb131a6481e" >> /usr/local/android-sdk/licenses/android-sdk-license
        - echo -e "\n24333f8a63b6825ea9c5514f83c2829b004d1fee" >> /usr/local/android-sdk/licenses/android-sdk-license
        # Install NDK and cmake via android sdkmanager.
        - /usr/local/android-sdk/tools/bin/sdkmanager --update > /dev/null
        - /usr/local/android-sdk/tools/bin/sdkmanager "emulator" "ndk-bundle" "cmake;3.6.4111459" > /dev/null
        - /usr/local/android-sdk/tools/bin/sdkmanager --list
      before_script:
        - export TERM=dumb
        - export _NO_CHECK_SIGNATURE=true
        - echo no | /usr/local/android-sdk/tools/bin/avdmanager create avd -n test -k "system-images;android-24;default;armeabi-v7a"
        - /usr/local/android-sdk/emulator/emulator -avd test -no-audio -no-window -dns-server 8.8.8.8 &
        - android-wait-for-emulator
        - /usr/local/android-sdk/platform-tools/adb shell input keyevent 82 &
      script:
        # Mandatory cmake parameter to set API level and platform for the android toolchain:
        # /usr/local/android-sdk/cmake/3.6.4111459/bin/cmake -DCMAKE_TOOLCHAIN_FILE=/usr/local/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-22
        # See also in /usr/local/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake

        # Using the ninja build command. Is much faster then make build command.
        - /usr/local/android-sdk/cmake/3.6.4111459/bin/cmake -H. -Bcmake-build -G'Android Gradle - Ninja' -DANDROID_ABI=armeabi-v7a -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=/usr/local/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_PLATFORM=android-19 -DCMAKE_MAKE_PROGRAM=/usr/local/android-sdk/cmake/3.6.4111459/bin/ninja -DANDROID_STL="c++_static" -DANDROID_CPP_FEATURES="exceptions rtti" -DENABLE_APACHECONNECTOR=OFF -DENABLE_NETSSL=OFF -DENABLE_CRYPTO=OFF -DENABLE_DATA_MYSQL=OFF -DENABLE_DATA_POSTGRESQL=OFF -DENABLE_TESTS=ON -DENABLE_LONG_RUNNING_TESTS=OFF -DOLD_REDIS_VERSION=ON && /usr/local/android-sdk/cmake/3.6.4111459/bin/cmake --build cmake-build --target all && cd cmake-build && travis_wait 30 /usr/local/android-sdk/cmake/3.6.4111459/bin/ctest -E Foundation --output-on-failure

    - env:    TEST_NAME="android API level 24"
      language: android
      jdk: openjdk8
      android:
        components:
          - tools
          - platform-tools
          - tools
          - build-tools-23.0.3
          - extra-android-support
          - extra-android-m2repository
          - android-24
          - sys-img-armeabi-v7a-android-24
          # Unfortunaly travis use the old android sdk tool instead of using the new sdkmanager.
          # In this deprecated android sdk tool there is no ndk-bundle or cmake package!
        licenses:
          - '.+'
      before_install:
        - export TERM=dumb
        - sudo apt-get update -qq
        # I don't understand why redis and mongodb are not installed although services added above !
        - sudo apt-get install -qq -y mongodb-server redis-server
        - /usr/bin/redis-server &
        - sudo /usr/bin/mongod --config /etc/mongodb.conf &
        - touch ~/.android/repositories.cfg
        - mkdir -p /usr/local/android-sdk/licenses
        - echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > /usr/local/android-sdk/licenses/android-sdk-license
        - echo -e "\nd56f5187479451eabf01fb78af6dfcb131a6481e" >> /usr/local/android-sdk/licenses/android-sdk-license
        - echo -e "\n24333f8a63b6825ea9c5514f83c2829b004d1fee" >> /usr/local/android-sdk/licenses/android-sdk-license
        # Install NDK and cmake via android sdkmanager.
        - /usr/local/android-sdk/tools/bin/sdkmanager --update > /dev/null
        - /usr/local/android-sdk/tools/bin/sdkmanager "emulator" "ndk-bundle" "cmake;3.6.4111459" > /dev/null
        - /usr/local/android-sdk/tools/bin/sdkmanager --list
      before_script:
        - export TERM=dumb
        - export _NO_CHECK_SIGNATURE=true
        - echo no | /usr/local/android-sdk/tools/bin/avdmanager create avd -n test -k "system-images;android-24;default;armeabi-v7a"
        - /usr/local/android-sdk/emulator/emulator -avd test -no-audio -no-window -dns-server 8.8.8.8 &
        - android-wait-for-emulator
        - /usr/local/android-sdk/platform-tools/adb shell input keyevent 82 &
      script:
        # Mandatory cmake parameter to set API level and platform for the android toolchain:
        # /usr/local/android-sdk/cmake/3.6.4111459/bin/cmake -DCMAKE_TOOLCHAIN_FILE=/usr/local/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-22
        # See also in /usr/local/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake

        # Using the ninja build command. Is much faster then make build command.
        - /usr/local/android-sdk/cmake/3.6.4111459/bin/cmake -H. -Bcmake-build -G'Android Gradle - Ninja' -DANDROID_ABI=armeabi-v7a -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=/usr/local/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_PLATFORM=android-24 -DCMAKE_MAKE_PROGRAM=/usr/local/android-sdk/cmake/3.6.4111459/bin/ninja -DANDROID_STL="c++_static" -DANDROID_CPP_FEATURES="exceptions rtti" -DENABLE_APACHECONNECTOR=OFF -DENABLE_NETSSL=OFF -DENABLE_CRYPTO=OFF -DENABLE_DATA_MYSQL=OFF -DENABLE_DATA_POSTGRESQL=OFF -DENABLE_TESTS=ON -DENABLE_LONG_RUNNING_TESTS=OFF -DOLD_REDIS_VERSION=ON && /usr/local/android-sdk/cmake/3.6.4111459/bin/cmake --build cmake-build --target all && cd cmake-build && travis_wait 30 /usr/local/android-sdk/cmake/3.6.4111459/bin/ctest -E Foundation --output-on-failure

    - env:    TEST_NAME="gcc (make)"
      compiler: gcc
      script:
        - ./configure --everything --omit=PDF && make all -s -j2 && sudo make install
        - sudo -s ./travis/runtests.sh

    - env:    TEST_NAME="clang (make)"
      compiler: clang
      script:
        - ./configure --everything --omit=PDF --config=Linux-clang && make all -s -j2  && sudo make install
        - sudo -s ./travis/runtests.sh

    - env:    TEST_NAME="arm-linux-gnueabi- (make)"
      script:
        - ./configure --omit=PDF,Data/ODBC,Data/MySQL,Crypto,NetSSL,PageCompiler && make all -s -j2 CROSS_COMPILE=arm-linux-gnueabi- POCO_TARGET_OSARCH=armv7l

    - env:    TEST_NAME="gcc (CMake)"
      compiler: gcc
      script:
        # disable tests, gcc-4.6 gets an internal compiler error
        - cmake -H. -Bcmake-build -GNinja -DENABLE_PDF=OFF -DENABLE_TESTS=OFF && cmake --build cmake-build --target all

    - env:    TEST_NAME="gcc-4.8 (CMake)"
      compiler: gcc
      script:
        - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        - sudo apt-get update -qq
        - sudo apt-get install -qq -y g++-4.8
        - export CC="gcc-4.8"
        - export CXX="g++-4.8"
        - cmake -H. -Bcmake-build -GNinja -DENABLE_PDF=OFF -DENABLE_TESTS=ON && cmake --build cmake-build --target all

    - env:    TEST_NAME="clang (CMake)"
      compiler: clang
      script:
        - cmake -H. -Bcmake-build -GNinja -DENABLE_PDF=OFF -DENABLE_TESTS=ON && cmake --build cmake-build --target all

    - env:    TEST_NAME="arm-linux-gnueabi-g++ (CMake)"
      script:
        - export CC="arm-linux-gnueabi-gcc"
        - export CXX="arm-linux-gnueabi-g++"
        - cmake -H. -Bcmake-build -GNinja -DENABLE_PDF=OFF -DENABLE_NETSSL=OFF -DENABLE_CRYPTO=OFF -DENABLE_TESTS=ON && cmake --build cmake-build --target all

    - env:    TEST_NAME="arm-linux-gnueabihf-g++ (CMake)"
      script:
        - export CC="arm-linux-gnueabihf-gcc"
        - export CXX="arm-linux-gnueabihf-g++"
        - cmake -H. -Bcmake-build -GNinja -DENABLE_PDF=OFF -DENABLE_NETSSL=OFF -DENABLE_CRYPTO=OFF -DENABLE_TESTS=ON && cmake --build cmake-build --target all

    # TODO osx build
    # TODO run test suite
    #  script:
    #    - ./configure && make all -s -j2
    #    - sudo ifconfig -a
    #    - sudo ifconfig venet0 multicast
    #    - sudo ifconfig -a
    #    - export POCO_BASE=`pwd`
    #    - sudo -E build/script/runtests.sh

    # build documentation and release
    - env:    TEST_NAME="documentation & release"
      compiler: clang
      script:
        - . env.sh && mkdoc all && mkrel all
        - ls -l releases

    # QA jobs for code analytics and metrics
    # static code analysis with cppcheck (we can add --enable=all later)
    - env:    TEST_NAME="cppcheck"
      script: cppcheck --force --quiet --inline-suppr -j2 -iData/SQLite/src/sqlite3.c .

    # search for TODO within source tree
    - env:    TEST_NAME="TODO"
      script: grep -r TODO *

    # search for FIXME within source tree
    - env:    TEST_NAME="FIXME"
      script: grep -r FIXME *

    # search for HACK within source tree
    - env:    TEST_NAME="HACK"
      script: grep -r HACK *

    # some statistics about the code base
    - env:    TEST_NAME="sloccount"
      script: sloccount .
