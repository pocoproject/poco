language: cpp

cache:
  - apt

branches:
  except:
    - /.*pp.eyor.*/

before_install:
  # we need a recent version of CMake
  # - sudo add-apt-repository -y ppa:andykimpe/cmake3
  # linux prereqisite packages
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then wget --no-check-certificate https://www.cmake.org/files/v3.2/cmake-3.2.3-Linux-x86_64.tar.gz; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then tar -xzvf cmake-3.2.3-Linux-x86_64.tar.gz; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then export PATH=$PWD/cmake-3.2.3-Linux-x86_64/bin:$PATH; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update -qq; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq -y unixodbc-dev libmysqlclient-dev libsqlite3-dev; fi 
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq -y g++-arm-linux-gnueabi g++-arm-linux-gnueabihf clang-3.5; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq -y sloccount cppcheck; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update -qq; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq -y g++-4.8; fi

services:
  - mongodb
  - redis-server
  - postgresql
  - mysql

addons:
  postgresql: "9.3"


notifications:
  slack: 
    rooms:
      - pocoproject:ItIUZvs8aJGyPdaKxIKMnS1t#travis

env:
  global: 
    TEST_NAME=""
    
before_script:
 - echo ${TEST_NAME}
 - chmod 755 ./travis/Linux/runtests.sh
 - chmod 755 ./travis/OSX/runtests.sh
 - if [ "$TRAVIS_OS_NAME" == "linux" ]; then mysql -u root -e 'create database pocotestdb;'; fi
 - if [ "$TRAVIS_OS_NAME" == "linux" ]; then mysql --version; fi
 - if [ "$TRAVIS_OS_NAME" == "linux" ]; then postgres --version; fi
 - sqlite3 -version

matrix:
  fast_finish: true

  include:
    - env:    TEST_NAME="OSX   clang (make) bundled"
      os: osx
      compiler: clang
      script:
        - export CC="clang"
        - export CXX="clang++"
        - clang++ -x c++ /dev/null -dM -E
        - ./configure --everything --omit=Data/ODBC,Data/MySQL,Data/PostgreSQL && make -s -j2 && sudo make install && ./travis/OSX/runtests.sh

    - env:    TEST_NAME="Linux gcc 4.6 (make) bundled"
      compiler: gcc
      script:
        - export CC="gcc"
        - export CXX="g++"
        - ./configure --everything && make -s -j2 && ./travis/Linux/runtests.sh
    
    - env:    TEST_NAME="Linux gcc 4.8 (make) bundled"
      compiler: gcc
      script:
        - export CC="gcc-4.8"
        - export CXX="g++-4.8"
        - ./configure --everything && make -s -j2 && ./travis/Linux/runtests.sh
    
    - env:    TEST_NAME="Linux gcc 4.6 (make) unbundled"
      compiler: gcc
      script:
        - export CC="gcc"
        - export CXX="g++"
        - sudo apt-get install -qq -y libpcre3-dev libssl-dev libexpat1-dev
        - ./configure --everything --unbundled && make -s -j2 && ./travis/Linux/runtests.sh

    - env:    TEST_NAME="Linux gcc 4.8 (make) unbundled"
      compiler: gcc
      script:
        - sudo apt-get install -qq -y libpcre3-dev libssl-dev libexpat1-dev
        - export CC="gcc-4.8"
        - export CXX="g++-4.8"
        - ./configure --everything --unbundled && make -s -j2 && ./travis/Linux/runtests.sh
    
    - env:    TEST_NAME="Linux clang 3.4 (make)"
      compiler: clang
      script:
        - ./configure --everything --config=Linux-clang && make -s -j2 && ./travis/Linux/runtests.sh

    - env:    TEST_NAME="Linux arm-linux-gnueabi- (make)"
      compiler: gcc
      script:
        - ./configure --omit=Data/ODBC,Data/MySQL,Data/PostgreSQL,Crypto,NetSSL,PageCompiler && make -s -j2  CROSS_COMPILE=arm-linux-gnueabi- POCO_TARGET_OSARCH=armv7l

    - env:    TEST_NAME="Linux gcc 4.6 (CMake)"
      compiler: gcc
      script:
        - export CC="gcc"
        - export CXX="g++"
        - source ./travis/ignored.sh
        - export POCO_BASE=`pwd`
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_TESTS=ON .. && make -s -j2 && ctest -VV -E Data && cd ..
 
    - env:    TEST_NAME="Linux gcc 4.8 (CMake)"
      compiler: gcc
      script:
        - export CC="gcc-4.8"
        - export CXX="g++-4.8"
        - source ./travis/ignored.sh
        - export POCO_BASE=`pwd`
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_TESTS=ON .. && make -s -j2 && ctest -VV -E Data && cd ..

    - env:    TEST_NAME="Linux clang 3.4 (CMake)"
      compiler: clang
      script:
        - source ./travis/ignored.sh
        - export POCO_BASE=`pwd`
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_TESTS=ON .. && make -s -j2 && ctest -VV -E Data && cd ..

    - env:    TEST_NAME="Linux arm-linux-gnueabi-g++ (CMake)"
      compiler: gcc
      script:
        - export CC="arm-linux-gnueabi-gcc"
        - export CXX="arm-linux-gnueabi-g++"
        - source ./travis/ignored.sh
        - export POCO_BASE=`pwd`
        - mkdir cmake-build 
        - cd cmake-build && cmake -DENABLE_NETSSL=OFF -DENABLE_CRYPTO=OFF -DENABLE_TESTS=ON .. && make -s -j2 && cd ..

    - env:    TEST_NAME="Linux arm-linux-gnueabihf-g++ (CMake)"
      compiler: gcc
      script:
        - export CC="arm-linux-gnueabihf-gcc"
        - export CXX="arm-linux-gnueabihf-g++"
        - source ./travis/ignored.sh
        - export POCO_BASE=`pwd`
        - mkdir cmake-build
        - cd cmake-build && cmake -DENABLE_NETSSL=OFF -DENABLE_CRYPTO=OFF -DENABLE_TESTS=ON .. && make -s -j2 && cd ..


    # QA jobs for code analytics and metrics
    # build documentation and release
    - env:    TEST_NAME="Linux documentation & release"
      compiler: gcc
      script:
        - export CC="gcc"
        - export CXX="g++"
        - . env.sh && mkdoc all && mkrel all

    # static code analysis with cppcheck (we can add --enable=all later)
    - env:    TEST_NAME="cppcheck"
      script: cppcheck --force --quiet --inline-suppr -j2 -iData/SQLite/src/sqlite3.c .
    # search for TODO within source tree
    - env:    TEST_NAME="TODO"
      script: grep -r TODO *
    # search for FIXME within source tree
    - env:    TEST_NAME="FIXME"
      script: grep -r FIXME *
    # search for HACK within source tree
    - env:    TEST_NAME="HACK"
      script: grep -r HACK *
    # some statistics about the code base
    - env:    TEST_NAME="sloccount"
      script: sloccount .
