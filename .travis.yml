language: cpp

cache:
 - apt

before_install:
  # we need a recent version of CMake
  - sudo add-apt-repository -y ppa:andykimpe/cmake3
  - sudo apt-get update -qq
  - sudo apt-get install -qq -y unixodbc-dev libmysqlclient-dev g++-arm-linux-gnueabi g++-arm-linux-gnueabihf clang-3.5 sloccount cppcheck 

services:
  - mongodb

env:
  global: TEST_NAME=""

before_script:
 - echo ${TEST_NAME}

matrix:
  include:
    - env:    TEST_NAME="gcc (make)"
      compiler: gcc
      script:
        - ./configure && make -s -j2
        - ./travis/runtests.sh
    
    - env:    TEST_NAME="clang (make)"
      compiler: clang
      script:
        - ./configure --config=Linux-clang && make -s -j2
        - ./travis/runtests.sh

    - env:    TEST_NAME="arm-linux-gnueabi- (make)"
      script:
        - ./configure --omit=Data/ODBC,Data/MySQL,Crypto,NetSSL,PageCompiler && make -s -j2 CROSS_COMPILE=arm-linux-gnueabi- POCO_TARGET_OSARCH=armv7l

    - env:    TEST_NAME="gcc (CMake)"
      compiler: gcc
      script:
        - sudo apt-get install -qq -y cmake3
        # disable tests, gcc-4.6 gets an internal compiler error
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_TESTS=OFF .. && make -j2 && cd ..

    - env:    TEST_NAME="gcc-4.8 (CMake)"
      compiler: gcc
      script:
        - sudo apt-get install -qq -y cmake3
        - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        - sudo apt-get update -qq
        - sudo apt-get install -qq -y g++-4.8
        - export CC="gcc-4.8"
        - export CXX="g++-4.8"
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_TESTS=ON .. && make -j2 && cd ..

    - env:    TEST_NAME="clang (CMake)"
      compiler: clang
      script:
        - sudo apt-get install -qq -y cmake3
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_TESTS=ON .. && make -j2 && cd ..

    - env:    TEST_NAME="arm-linux-gnueabi-g++ (CMake)"
      script:
        - sudo apt-get install -qq -y cmake3
        - export CC="arm-linux-gnueabi-gcc"
        - export CXX="arm-linux-gnueabi-g++"
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_NETSSL=OFF -DENABLE_CRYPTO=OFF -DENABLE_TESTS=ON .. && make -j2 && cd ..

    - env:    TEST_NAME="arm-linux-gnueabihf-g++ (CMake)"
      script:
        - sudo apt-get install -qq -y cmake3
        - export CC="arm-linux-gnueabihf-gcc"
        - export CXX="arm-linux-gnueabihf-g++"
        - mkdir cmake-build && cd cmake-build && cmake -DENABLE_NETSSL=OFF -DENABLE_CRYPTO=OFF -DENABLE_TESTS=ON .. && make -j2 && cd ..

    # TODO osx build
    # TODO run test suite
    #  script:
    #    - ./configure && make -s -j2
    #    - sudo ifconfig -a
    #    - sudo ifconfig venet0 multicast
    #    - sudo ifconfig -a
    #    - export POCO_BASE=`pwd`
    #    - sudo -E build/script/runtests.sh

    # QA jobs for code analytics and metrics
    # static code analysis with cppcheck (we can add --enable=all later)
    - env:    TEST_NAME="cppcheck"
      script: cppcheck --force --quiet --inline-suppr -j2 -iData/SQLite/src/sqlite3.c .
    # search for TODO within source tree
    - env:    TEST_NAME="TODO"
      script: grep -r TODO *
    # search for FIXME within source tree
    - env:    TEST_NAME="FIXME"
      script: grep -r FIXME *
    # search for HACK within source tree
    - env:    TEST_NAME="HACK"
      script: grep -r HACK *
    # some statistics about the code base
    - env:    TEST_NAME="sloccount"
      script: sloccount .
