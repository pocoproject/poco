//
// SortedDirectoryIterator.cpp
//
// $Id$
//
// Library: Foundation
// Package: Filesystem
// Module:  DirectoryIterator
//
// Copyright (c) 2004-2012, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "Poco/SortedDirectoryIterator.h"
#include <algorithm>


namespace Poco {


SortedDirectoryIterator::SortedDirectoryIterator()
	: DirectoryIterator(), _is_finished(true)
{
}


SortedDirectoryIterator::SortedDirectoryIterator(const std::string& path)
	: DirectoryIterator(path), _is_finished(false)
{
	scan();
	next();
}


SortedDirectoryIterator::SortedDirectoryIterator(const DirectoryIterator& iterator)
	: DirectoryIterator(iterator), _is_finished(false)
{
	scan();
	next();
}


SortedDirectoryIterator::SortedDirectoryIterator(const File& file)
	: DirectoryIterator(file), _is_finished(false)
{
	scan();
	next();
}


SortedDirectoryIterator::SortedDirectoryIterator(const Path& path)
	: DirectoryIterator(path), _is_finished(false)
{
	scan();
	next();
}


SortedDirectoryIterator::~SortedDirectoryIterator()
{
}

SortedDirectoryIterator& SortedDirectoryIterator::operator ++()
{
	if (!_is_finished)
	{
		next();
	}
	return *this;
}


void SortedDirectoryIterator::scan()
{
	DirectoryIterator end_it;
	while (*this != end_it)
	{
		if ((*this)->isDirectory())
			_directories.push_back(_path.toString());
		else
			_files.push_back(_path.toString());

		DirectoryIterator::operator++();
	}

	std::sort(_directories.begin(), _directories.end());
	std::sort(_files.begin(), _files.end());
}


void SortedDirectoryIterator::next()
{
	DirectoryIterator end_it;
	if (!_directories.empty())
	{
		_path.assign(_directories.front());
		_directories.pop_front();
		_file = _path;
	}
	else if (!_files.empty())
	{
		_path.assign(_files.front());
		_files.pop_front();
		_file = _path;
	}
	else
	{
		_is_finished = true;
		_path = end_it.path();
		_file = _path;
	}
}


} // namespace Poco
