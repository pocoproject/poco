version: '{build}'

cache:
    - c:\OpenSSL-Win32
    - c:\OpenSSL-Win64
    - c:\ProgramData\chocolatey
    - c:\mysql-5.7.9-win32

services:
  - mongodb
  - mysql
  
branches:
  only:
  - AppVeyor

os: Windows Server 2012

platform:
#  - x86
  - x64
# to add several configurations to build matrix:
configuration:
#  - debug
  - release


environment:
  bundling: bundled
    
  matrix:
    - builder: 120
      arch_ssl: Win32
      arch_nuget: Win32
      arch_vc: x86
      arch_choco: --x86
      arch_target: x86
      platform: Win32
      linkmode: shared
      suffix:

#    - builder: 120
#      arch_ssl: Win64
#      arch_nuget: x64
#      arch_vc: x86_amd64
#      arch_choco:
#      arch_target: x86_64
#      linkmode: shared
#      suffix: 64
      
#    - builder: 140
#      arch_ssl: Win32
#      arch_nuget: Win32
#      arch_vc: x86
#      arch_choco: --x86
#      arch_target: x86
#      platform: Win32
#      linkmode: shared
#      suffix:

    - builder: 140
      arch_ssl: Win64
      arch_nuget: x64
      arch_vc: x86_amd64
      arch_choco:
      arch_target: x86_64
      platform: x64
      linkmode: shared
      suffix: 64
      
    - builder: 140
      arch_ssl: Win64
      arch_nuget: x64
      arch_vc: x86_amd64
      arch_choco:
      arch_target: x86_64
      platform: x64
      linkmode: static_md
      suffix: 64
      
    - builder: 140
      arch_ssl: Win64
      arch_nuget: x64
      arch_vc: x86_amd64
      arch_choco:
      arch_target: x86_64
      platform: x64
      linkmode: static_mt
      suffix: 64
      
#    - builder: cmake
#      arch_ssl: Win64
#      arch_nuget: x64
#      arch_vc: amd64
#      arch_choco:
#      arch_target: x86_64
      
#    - builder: cmake
#      arch_ssl: Win32
#      arch_nuget: Win32
#      arch_vc: amd64_x86  # cross-compile from amd64 to x86
#      arch_choco: --x86
#      arch_target: x86


install:
#  - cinst cmake
  - systeminfo
  - c:\cygwin\bin\uname -a
  - c:\cygwin\bin\cat /proc/cpuinfo
  - c:\cygwin\bin\cat /proc/meminfo
  - ps: |
        if (Test-Path "$env:ChocolateyInstall/bin/jom.exe") {
            echo "using jom from cache"
        } else {
            choco install jom
        }
  - ps: |
        if (Test-Path "c:\OpenSSL-$env:arch_ssl") {
            echo "using openssl from cache"
        } else {
            echo "downloading openssl"
            Invoke-WebRequest "https://slproweb.com/download/$($env:arch_ssl)OpenSSL-1_0_2d.exe" -OutFile c:\openssl-setup.exe
            echo "installing openssl"
            Start-Process -Wait -FilePath c:\openssl-setup.exe -ArgumentList "/silent /verysilent /sp- /suppressmsgboxes"
        }
  - ps: |
        if ($env:builder -eq "120") {
            if (Test-Path "c:\mysql-5.7.9-win32") {
                echo "using mysql-5.7.9-win32 from cache"
            } else {
                echo "downloading mysql-5.7.9-win32"
                Invoke-WebRequest "http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.9-win32.zip" -OutFile c:\mysql-5.7.9-win32.zip
                echo "installing mysql-5.7.9-win32"
                7z -e -y mysql-5.7.9-win32.zip -o c:\
            }
        }
#  - c:\cygwin\bin\find /cygdrive/c/OpenSSL-%arch_ssl% "-type" f




before_build:
  - set
  - ps: |
      if ($env:builder -eq "120") {
        & "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat" %arch_vc%
      }
      if ($env:builder -eq "140") {
        & "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" %arch_vc%
      }
  
  - set PATH=%ChocolateyInstall%\bin;%PATH%
# chocolatey brokes jom, here's workaround
# see https://github.com/jcfr/qt-easy-build/commit/6366f4275562bdaf4f686838600f46894579c41e)
  - set PATH=%ChocolateyInstall%\lib\jom\content;%PATH%
  - path
# MySQL
  - ps: |
      if ($env:builder -eq "120") {
          $env:INCLUDE = "C:\mysql-5.7.9-win32\include;" + $env:INCLUDE
          $env:LIB     = "C:\mysql-5.7.9-win32\lib;" + $env:LIB
      }
      if ($env:builder -eq "140") {
          $env:INCLUDE = "C:\Program Files\MySql\MySQL Server 5.6\include;" + $env:INCLUDE
          $env:LIB     = "C:\Program Files\MySql\MySQL Server 5.6\lib;" + $env:LIB
      }
# OpenSSL  
  - set INCLUDE=C:\OpenSSL-%arch_ssl%\include;%INCLUDE%
  - set     LIB=C:\OpenSSL-%arch_ssl%\lib;C:\OpenSSL-%arch_ssl%\lib\VC;C:\OpenSSL-%arch_ssl%\lib\VC\static;%LIB%  
  - set INCLUDE
  - set LIB

after_build:

build:
  verbosity: minimal
# msbuild "cpp\vs2013\ISO-8583.sln" /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"

build_script:
  - ps: |
      if ($env:builder -eq "cmake") {
         mkdir install
         & .\build_cmake.cmd %Configuration% "-DCMAKE_INSTALL_PREFIX=%CD%\install"
      } else {
         & .\buildwin.cmd %builder% build %linkmode% %Configuration% %platform% samples tests msbuild 
      }


before_test:
  - echo runtests2
  - ps: Write-Host "runtests2"

after_test:

test_script:
  - ps: |
      if ($env:builder -eq "cmake") {
      }
      if (($env:builder -ne "cmake") -and ($env:linkmode -eq "shared")) {    
         $env:PATH = $env:CD + "\bin" + $env:suffix + ";" + $env:PATH
         $env:EXCLUDE_TESTS = "Foundation"
      }
# FIXME test runs in loop and job fails by timeout
#         & .\build\script\runtests2 %suffix%
 
 
on_success:
  - echo success

on_failure:
  - echo failure

on_finish:
  - echo finish
  
  
notifications:
  - provider: Email
    on_build_success: false
    on_build_failure: false
    on_build_status_changed: false
    
      
  - provider: Slack
    auth_token:
      secure: xoOlP1UHshqjvh/INwMcNhZ5UHsTVKLGY5maTSjaxDc0fvRwoWIdYvY/CofQEuy2wOIBQK4eLD+tA0xG78ZgqQ==
    channel: appveyor
    
 