//
// Parser.h
//
// $Id$
//
// Library: JSON
// Package: JSON
// Module:  Parser
//
// Definition of the Parser class.
//
// Copyright (c) 2012, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef JSON_JSONParser_INCLUDED
#define JSON_JSONParser_INCLUDED


#include "Poco/JSON/JSON.h"
#include "Poco/JSON/Object.h"
#include "Poco/JSON/Array.h"
#include "Poco/JSON/ParseHandler.h"
#include "Poco/Dynamic/Var.h"
#include "Poco/StreamTokenizer.h"
#include <istream>
#include <sstream>


namespace Poco {
namespace JSON {


class JSON_API Parser
	/// A class for passing JSON strings or streams.
{
public:

	Parser(const Handler::Ptr& pHandler = new ParseHandler);
		/// Constructor.

	virtual ~Parser();
		/// Destructor.

	Dynamic::Var parse(const std::string& source);
		/// Parses a string.

	Dynamic::Var parse(std::istream& in);
		/// Parses a JSON from the input stream.

	void setHandler(const Handler::Ptr& pHandler);
		/// Set the handler.

	const Handler::Ptr& getHandler();
		/// Returns the handler.

	Dynamic::Var result() const;
		/// Returns the result of parsing;

private:
	const Token* nextToken();
		/// Returns the next token.

	void readObject();
		/// Starts reading an object.

	void readArray();
		/// Starts reading an array.

	bool readRow(bool firstCall = false);
		/// Reads a property value pair. Returns true when a next row is expected.

	void readValue(const Token* token);
		/// Read a value from the token.

	bool readElements(bool firstCall = false);
		/// Read all elements of an array.

	StreamTokenizer _tokenizer;
	Handler::Ptr    _pHandler;
};


inline Dynamic::Var Parser::parse(const std::string& source)
{
	std::istringstream is(source);
	return parse(is);
}


inline void Parser::setHandler(const Handler::Ptr& pHandler)
{
	_pHandler = pHandler;
}


inline const Handler::Ptr& Parser::getHandler()
{
	return _pHandler;
}


inline Dynamic::Var Parser::result() const
{
	return _pHandler->result();
}


}} // namespace Poco::JSON


#endif // JSON_JSONParser_INCLUDED
