#! /bin/sh
#
# $Id: //poco/1.4/release/script/mkdoc#2 $
#
# mkdoc
#
# Create reference documentation for a POCO release.
# This is a wrapper for mkdocumentation that syncs to the
# Perforce head revision, reads the current
# version from $POCO_BASE/VERSION and requires a release
# specification (loaded from $POCO_BASE/release/spec/*.release)
# as argument.
#
# usage: mkdoc [-l <perforce-label>] [<specfile>]
#

if [ "$POCO_BASE" = "" ] ; then
  echo "Error: POCO_BASE not set."
  exit 1
fi

spec=""
docConfig=$POCO_BASE/PocoDoc/cfg/mkdoc-poco.xml
while [ "$1" != "" ] ; 
do
	if [ "$1" = "-C" ] ; then
		shift
		docConfig=$1
		shift
	elif [ "$1" = "-v" ] ; then
		shift
		version=$1
		shift
	else
		spec=$1
		shift
	fi
done

if [ "$spec" != "" ] ; then
  relspec="-f release/spec/${spec}.release"
  tag="-$spec"
  reltag="-t $spec"
else
  relspec=""
  reltag=""
  tag=""
fi

cd $POCO_BASE

if [ ! -f VERSION ] ; then
  echo "Error: No VERSION file found."
  exit 2
fi

if [ "$version" = "" ] ; then
	read version <$POCO_BASE/VERSION
fi
release=$version$tag

#
# Build release
#

echo "Building tools"

tools=$POCO_BASE/stage/tools
rm -rf $tools
mkdir -p $tools
mkrelease -o $tools $version CppParser PocoDoc

cd $tools
./configure --no-tests --no-samples
make -s -j8

cd $POCO_BASE

osname=`uname -s | tr ' ' '_'`
osarch=`uname -m | tr ' ' '_'`

if [ $osname = "Darwin" ] ; then
	archpath=`dirname stage/tools/PocoDoc/bin/Darwin/*/PocoDoc`
	osarch=`basename $archpath`
fi
if [ ${osname:0:6} = "CYGWIN" ] ; then
	osname="Cygwin"
fi

export PATH=$tools/PocoDoc/bin/$osname/$osarch:$PATH
if [ $osname = "Cygwin" ] ; then
	export PATH=$tools/lib/$osname/$osarch:$PATH
fi

echo PATH=$PATH

echo "Building documentation $release (using $docConfig)"
mkdocumentation $reltag $relspec -C $docConfig -v $version
