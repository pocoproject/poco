//
// Route.h
//
// $Id: //poco/1.4/Net/include/Poco/Net/Route.h#1 $
//
// Library: Net
// Package: NetCore
// Module:  Route
//
// Definition of the Route class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Net_Route_INCLUDED
#define Net_Route_INCLUDED


#include "Poco/Net/Net.h"


#if defined(POCO_OS_FAMILY_WINDOWS) && (_WIN32_WINNT >= 0x600) // only Vista/Longhorn and up
	#ifndef POCO_NET_HAS_ROUTE
		#define POCO_NET_HAS_ROUTE
	#endif
#elif defined(POCO_OS_FAMILY_BSD)
	#ifndef POCO_NET_HAS_ROUTE
		#define POCO_NET_HAS_ROUTE
	#endif
#elif defined(POCO_OS_FAMILY_UNIX) && (POCO_OS == POCO_OS_LINUX)
	#ifndef POCO_NET_HAS_ROUTE
		#define POCO_NET_HAS_ROUTE
	#endif
#else
	#ifdef POCO_NET_HAS_ROUTE
		#undef POCO_NET_HAS_ROUTE
	#endif
#endif


#ifdef POCO_NET_HAS_ROUTE


#include "Poco/Net/IPAddress.h"
#include "Poco/Net/NetworkInterface.h"
#include "Poco/Timestamp.h"
#include <ctime>
#include <list>


namespace Poco {
namespace Net {


class RouteHelper;


class Net_API Route
{
public:
	typedef std::list<Route> RouteList;

	static const unsigned int ROUTE_METRIC_UNKNOWN = ~0U;
	static const unsigned int ROUTE_MTU_UNKNOWN = 0U;
	static const unsigned int ROUTE_HOPS_UNKNOWN = ~0U;
	static const unsigned int ROUTE_USE_UNKNOWN = ~1U;
	static const unsigned int ROUTE_CREATED_UNKNOWN = 0U;
	
	enum RouteType
	{
		ROUTE_NONE = 0,
		ROUTE_OTHER = 1,
		ROUTE_INVALID = 2,
		ROUTE_DIRECT = 3,
		ROUTE_INDIRECT = 4
	};

	enum RouteProto
	{
		ROUTE_PROTO_NONE = 0,
		ROUTE_PROTO_OTHER = 1,
		ROUTE_PROTO_LOCAL = 2,
		ROUTE_PROTO_NET_MGMT = 3,
		ROUTE_PROTO_ICMP = 4,
		ROUTE_PROTO_EGP = 5,
		ROUTE_PROTO_GGP = 6,
		ROUTE_PROTO_HELLO = 7,
		ROUTE_PROTO_RIP = 8,
		ROUTE_PROTO_ISIS = 9,
		ROUTE_PROTO_ESIS = 10,
		ROUTE_PROTO_CISCO = 11, // EIGRP?
		ROUTE_PROTO_BBN = 12,
		ROUTE_PROTO_OSPF = 13,
		ROUTE_PROTO_BGP = 14,
	};

	Route(const IPAddress& dst, const IPAddress& netmask, const IPAddress& nextHop, unsigned ifIndex, RouteType type);
	/// Creates Route.
	
	Route(const IPAddress& dst, const IPAddress& netmask, unsigned ifIndex, RouteType type);
	/// Creates Route.
	
	Route(const IPAddress& dst, unsigned prefix, const IPAddress& nextHop, unsigned ifIndex, RouteType type);
	/// Creates Route.
	
	Route(const IPAddress& dst, unsigned prefix, unsigned ifIndex, RouteType type);
	/// Creates Route.
	
	~Route();
		/// Destroys Route.

	const IPAddress getDest() const;
		/// Returns destination.

	unsigned getPrefix() const;
		/// Returns prefix.

	const IPAddress getNetmask() const;
		/// Returns net mask (IPv4 only).

	const IPAddress getNextHop() const;
		/// Returns next hop.

	unsigned getIfIndex() const;
		/// Returns interface index.

	const NetworkInterface getNetworkInterface() const;
		/// Returns netwrok interface.

	RouteType getType() const;
		/// Returns route type.

	unsigned getMetric() const;
		/// Returns metric; not available on all platforms.

	unsigned getHops() const;
		/// Returns hops count; not available on all platforms.

	unsigned getMTU() const;
		/// Returns MTU; not available on all platforms.

	unsigned getUsage() const;
		/// Returns usage; not available on all platforms.

	RouteProto getProto() const;
		/// Returns proto; not available on all platforms.

	std::time_t getAge() const;
		/// Returns age; not available on all platforms.

	bool validMetric() const;
		/// Returns true if metric is valid; not available on all platforms.

	bool validHops() const;
		/// Returns true if hops are valid; not available on all platforms.

	bool validMTU() const;
		/// Returns true if MTU is valid; not available on all platforms.

	bool validUsage() const;
		/// Returns true if usage is valid; not available on all platforms.

	bool validProto() const;
		/// Returns true if proto is valid; not available on all platforms.

	bool validAge() const;
		/// Returns true if age is valid; not available on all platforms.


	bool operator == (const Route& other) const;
		/// Return strue if this route is equal to other.

	bool operator != (const Route& other) const;
		/// Return strue if this route is not equal to other.

	static RouteList list(IPAddress::Family family);
		/// Retruns the list of routes.

	static RouteList defaults(IPAddress::Family family);
		/// Returns default routes.

	static RouteList match(IPAddress target);
		/// Retruns routes matching target.

	static IPAddress::List getDefaultAddresses(IPAddress::Family family);
		/// Returns default IP addresses for the family.

	static std::string protocolName(RouteProto proto);
		/// Returns protocol as string.

	void setMTU(unsigned mtu);
		/// Sets the MTU to specified value.

	void setAge(std::time_t created);
		/// Sets MTU to specified value.

	void setProto(RouteProto proto);
		/// Sets proto to specified value.

	void setMetric(unsigned metric);
		/// Sets metric to specified value.

	void setHops(unsigned hops);
		/// Sets hops to specified value.

	void setUsage(unsigned use);
		/// Sets usage to specified value.

private:
	// portable attributes
	IPAddress	_dst;
	IPAddress	_netmask;
	IPAddress	_nextHop;
	unsigned	_ifIndex;
	RouteType	_type;

	// optional attributes supported on some platforms
	unsigned	_metric;
	unsigned	_mtu;
	unsigned	_hops;
	unsigned	_use;
	RouteProto	_proto;
	Timestamp	_created;
};


//
// inlines
//


inline const IPAddress Route::getDest() const
{
	return _dst;
}


inline unsigned Route::getPrefix() const
{
	return _netmask.prefixLength();
}


inline const IPAddress Route::getNetmask() const
{
	return _netmask;
}


inline const IPAddress Route::getNextHop() const
{
	return _nextHop;
}


inline unsigned Route::getIfIndex() const
{
	return _ifIndex;
}


inline const NetworkInterface Route::getNetworkInterface() const
{
	return NetworkInterface::forIndex(_ifIndex);
}


inline Route::RouteType Route::getType() const
{
	return _type;
}


inline unsigned Route::getMetric() const
{
	return _metric;
}


inline unsigned Route::getHops() const
{
	return _hops;
}


inline unsigned Route::getMTU() const
{
	return _mtu;
}


inline unsigned Route::getUsage() const
{
	return _use;
}


inline Route::RouteProto Route::getProto() const
{
	return _proto;
}


inline bool Route::validMetric() const
{
	return (_metric != ~0U);
}


inline bool Route::validHops() const
{
	return (_hops != ~0U);
}


inline bool Route::validMTU() const
{
	return (_mtu != 0U);
}


inline bool Route::validUsage() const
{
	return (_use != ~0U);
}


inline bool Route::validProto() const
{
	return (_proto != (RouteProto)0);
}


inline bool Route::validAge() const
{
	return (_created != 0U);
}


inline bool Route::operator == (const Route& other) const
{
	return (_dst == other._dst
		 && _netmask == other._netmask
		 && _nextHop == other._nextHop
		 && _metric == other._metric
		 && _ifIndex == other._ifIndex
		 && _type == other._type
		 && _proto == other._proto
		 && _created == other._created);
}


inline bool Route::operator != (const Route& other) const
{
	return !(*this == other);
}


inline void Route::setMTU(unsigned mtu)
{
	_mtu = mtu;
}


inline void Route::setMetric(unsigned metric)
{
	_metric = metric;
}


inline void Route::setHops(unsigned hops)
{
	_hops = hops;
}


inline void Route::setUsage(unsigned use)
{
	_use = use;
}


} } // Poco::Net


#endif // POCO_NET_HAS_ROUTE


#endif // Net_Route_INCLUDED
